# FurnishHub - Frontend-Backend Integration

## Technologies Used

### Frontend
- **React** - JavaScript library for building user interfaces
- **React Router** - For client-side routing
- **Axios** - For making HTTP requests to the backend
- **React Context API** - For state management
- **Formik & Yup** - For form handling and validation
- **Styled Components** / **CSS Modules** - For styling components
- **React Icons** - For iconography
- **React Toastify** - For notifications and alerts

### Backend
- **Node.js** - JavaScript runtime environment
- **Express.js** - Web application framework
- **MongoDB** - NoSQL database
- **Mongoose** - MongoDB object modeling
- **JSON Web Tokens (JWT)** - For authentication
- **Bcrypt** - For password hashing
- **Multer** - For handling file uploads
- **Cloudinary** - For image storage and management
- **Nodemailer** - For sending emails (password reset, etc.)
- **CORS** - For enabling Cross-Origin Resource Sharing

### Development Tools
- **Git & GitHub** - Version control and collaboration
- **Postman** / **Insomnia** - API testing
- **VS Code** - Code editor
- **ESLint** - Code linting
- **Prettier** - Code formatting
- **NPM** / **Yarn** - Package management

### Deployment
- **Railway.app** - Backend hosting
- **Vercel** / **Netlify** - Frontend hosting
- **MongoDB Atlas** - Cloud database service

## Backend API Endpoints

### Authentication
- **POST /api/v1/register** - User registration
  - Request body: { name, email, password }
  - Returns: User data with auth token

- **POST /api/v1/login** - User login
  - Request body: { email, password }
  - Returns: User data with auth token

### Products
- **GET /api/v1/products** - Get all products
- **GET /api/v1/product/:id** - Get product details
- **POST /api/v1/product/new** - Create new product (Admin only)
  - Requires authentication
  - Accepts multipart/form-data for image uploads
- **PUT /api/v1/product/:id** - Update product (Admin only)
- **DELETE /api/v1/product/:id** - Delete product (Admin only)

### Contact
- **POST /api/v1/contact** - Submit contact form
  - Request body: { name, email, subject, message }

### File Upload
- **POST /api/v1/upload** - Upload image files
  - Accepts multipart/form-data with 'image' field
  - Returns: { imageUrl: string }

## Frontend Implementation

### API Configuration
- Base URL: `https://furnishhub-production.up.railway.app/api/v1`
- Axios is used for HTTP requests
- JWT tokens are used for authentication

### Key Frontend Components
1. **Product Management**
   - `productService.js` handles all product-related API calls
   - Supports CRUD operations for products
   - Handles file uploads using FormData

2. **Authentication**
   - Login/Register forms for user authentication
   - Protected routes for admin functionality
   - JWT token storage in HTTP-only cookies

3. **Contact Form**
   - Sends form data to the backend
   - Handles success/error responses

### Environment Variables
Frontend requires the following environment variables:
- `REACT_APP_API_URL`: Base URL for API requests
- `REACT_APP_GOOGLE_MAPS_API_KEY`: For location services (if applicable)

## Setup Instructions

### Backend
1. Install dependencies: `npm install`
2. Set up environment variables in `.env`
3. Run migrations: `npm run migrate`
4. Start server: `npm run dev`

### Frontend
1. Install dependencies: `npm install`
2. Set up environment variables in `.env`
3. Start development server: `npm start`

## Deployment
- Backend is deployed on Railway.app
- Frontend is deployed on Vercel/Netlify
- Environment variables must be configured in the deployment platform    